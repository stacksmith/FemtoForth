// /******************************************************************************
// Copyright 2014 Victor Yurkovsky
// 
// This file is part of the FemtoForth project.
// 
// FemtoForth is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// FemtoForth is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with FemtoForth. If not, see <http://www.gnu.org/licenses/>.
// 
// *****************************************************************************/
// ============================================ 
// system'io stuff
//
cd system'io
0 U32 HIN
end

1 U32 HOUT
end
// ---
PROC emit // (c--)
{  HOUT putc ; }
end

PROC key // (--n)
{ HIN getc ; }
end



PROC hexd // (hexd--ascii) convert a hex digit to ascii
{ 
  $F and '0' +
  if( $39 over < ) 
    7 + 
  thanx ; 
}
end

PROC hexp // (val,nybcnt--)
{
  times (
    28 ror
    dup hexd emit
  )
  drop ;
}
end

PROC . // (val--)
{
  8 hexp ;
}
end

PROC hex2 // (val--) output 2 hex digits
{ 24 shl 2 hexp ; }
end

PROC hex4 // (val--) output 4 hex digits
{ 16 shl 4 hexp ; }
end

PROC ctell // (ptr,cnt--)
{ if( dup 0 = ) dbl'drop ; thanx
  times (
    U8'@++ emit
  )
  drop ;
}
end
PROC space { $20 emit ; }
end 
PROC spaces // (i--) Print i spaces
{
    times ( space ) ;
}
end
PROC cr { $D emit $A emit ; }
end
PROC tab { 9 emit ; }
end
// ============================================ 
PROC color // (col--)
{  $1B emit
   "[3" ctell
   '0' + emit // output as ascii digit
   'm' emit
   ;
}
end

cd color
PROC red { 1 color ; }
end
PROC green { 2 color ; }
end
PROC yellow { 3 color ; }
end
PROC blue { 4 color ; }
end
PROC magenta { 4 color ; }
end
PROC cyan { 6 color ; }
end
PROC white { 7 color ; }
end

PROC reset { $1B emit "[0m" ctell ; }
end
PROC bright { $1B emit "[1m" ctell ; }
end
PROC dim { $1B emit "[2m" ctell ; }
end
// ============================================ 
cd core'U8
PROC is_print // (c--c,flag) 1 if the character is printable
{ dup
  if( 127 gt ) drop 0 ; thanx
  if( 32 lt ) drop 0 ; thanx
  drop 1 ;
}
end
// ============================================ 

cd system'io
PROC splashp
{ color'blue 4 times (
  "-+end+-- -- - - -- -" ctell
  ) cr ;
}
end
PROC splash
{ splashp 
  tab tab color'yellow " FemtoForth" ctell 
  tab tab color'cyan "2012 Victor Yurkovsky" ctell cr 
  splashp color'white cr ; }
end
// ==============================================================
// TABLE
cd system
mkdir table cd table
SYSBASE $8 + SYSVAR bottom
end

SYSBASE $C + SYSVAR top
end

SYSBASE $80 + $10 + SYSVAR runptr // used to preserve table for cleanup after running
end

// table'top .
// --------------------------------------------------------------
PROC ptr_check // {ptr -- ptr,flg} Check that the pointer is valid
{ 
    if( table'bottom lt ) 0 ; thanx
    if( table'top ge ) 0 ; thanx
    1 ;
}
end
// --------------------------------------------------------------
PROC base // {ptr--base} get table base for pointer
{
    1+ 4 shr 2 shl ; // 16:1
}
end
// ------------------------------------------------------f--------
PROC detokenize // (ptr--pointer corresponding to token at ptr)
{
   dup table'base // ptr,table
   swap U8'@ 4* + @        // TODO:*** reference
   ;
}
end


// ==============================================================
// HEAD
cd system'core
mkdir head cd head
SYSBASE $20 + SYSVAR bottom
end
SYSBASE $24 + SYSVAR top
end
SYSBASE $80 + $18 + SYSVAR ptr
end
PROC ptr_check // {ptr -- ptr,flg} Check that the pointer is valid
{ 
    if( head'bottom lt ) 0 ; thanx
    if( head'top ge ) 0 ; thanx
    1 ;
}
end
PROC name // (e--name,cnt) //from entry pointer, get name/cnt
{   23 + U8'@++ ;
}
end
PROC size // (e--size) return size of the entry (head+src)
{   20 + U16'@ 24 + ;
}
end
PROC next // (e-echild) return first child
{   @ ;
}
end
PROC dad // (e-echild) return first child
{   4 + @ ;
}
end
PROC child // (e-echild) return first child
{   8 + @ ;
}
end
PROC type // (e-echild) return e's type
{   12 + @ ;
}
end
PROC code // (e--code) return code pointer
{   16 + @ ;
}
end
PROC namelen // (e--n) get the name length
{   23 + U8'@ ; }
end
// TODO: why can't I eliminate the = test?
PROC locatex // (ptr,cnt,hdir -- h/0)
{
    head'child begin
      if( dup 0= ) drop dbl'drop 0 ; thanx
      dup push // preserve eptr
      if( head'namelen over = ) // ptr,cnt
        if( RSP@ head'name STR8'eq ) // l-pres compare
          dbl'drop pop ; // return head
        thanx
      thanx
      pop head'next
    repeat
}
end
PROC owner // (ptr--head/0) find the head referring to this ptr
{ 
    // walk the entire header list.  TOS=header; NOS=addr
    head'bottom begin
      if( dup head'ptr = ) dbl'drop 0 ; thanx  // exit on head'ptr
      if( dbl'dup head'code = ) 
        swap drop ;
      thanx 
      dup head'size +
    repeat
}
end

PROC name. // (h--) print the qualified name
{ 0 swap // (0,h--) will be stacking recursively
  begin
    dup head'dad
    if( zr ) 
      drop begin
        head'name ctell
        if( zr ) drop ; thanx
        ''' emit
      repeat
    thanx
  repeat
}
end


// ============================================ 
// DATA
cd system'core
mkdir data cd data
SYSBASE SYSVAR bottom
end
SYSBASE 4+ SYSVAR top
end

SYSBASE $80 + $8 + SYSVAR ptr
end
PROC ptr_check // {ptr -- ptr,flg} Check that the pointer is valid
{ 
    if( data'bottom lt ) 0 ; thanx
    if( data'top ge ) 0 ; thanx
    1 ;
}

end
cd system'core
mkdir run cd run
$04000080 $C + SYSVAR ptr
end
// ============================================ 
// Some debugging
// ============================================ 
// sys
// ============================================ 
cd system'core
PROC osys {
color'green "     TOS      NOS      DSP      RSP     HEAD      CPL     BASE  ENTRIES" ctell cr 
  dup . space over . space DSP 4+ . space RSP . space
  head'ptr . space
  run'ptr . space
  run'ptr table'base . space
  table'runptr -( run'ptr table'base ) 2 shr .
cr ;
 }
end

cd test
PROC dump // (pt--)
{ 
  table'base
  16 times (
      dup . space
      dup @ head'owner head'name ctell
      4+
      cr
  ) 
  ;
}
end

PROC timit1
{
  sys'gettimeofday
  1000000000 times ( )
  sys'gettimeofday
  swap2
  D-
  swap . . cr
  ;
}
end

PROC timit2
{
  sys'gettimeofday
  1000000000 0 do loop
  sys'gettimeofday
  swap2
  D-
  swap . . cr
  ;
}
end

PROC timit3
{
  sys'gettimeofday
  1000000000 0 do 1 +loop
  sys'gettimeofday
  swap2
  D-
  swap . . cr
  ;
}
end

PROC timit4
{
  sys'gettimeofday
  1000000000 0 do one +loop
  sys'gettimeofday
  swap2
  D-
  swap . . cr
  ;
}
end
