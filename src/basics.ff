// /******************************************************************************
// Copyright 2014 Victor Yurkovsky
// 
// This file is part of the FemtoForth project.
// 
// FemtoForth is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// FemtoForth is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with FemtoForth. If not, see <http://www.gnu.org/licenses/>.
// 
// *****************************************************************************/
// ============================================ 
// system'io stuff
//
cd system'io
U32 HIN
|
0 into HIN

U32 HOUT
|
1 into HOUT
// ---
PROC emit // (c--)
{  HOUT putc ; }
|

PROC key // (--n)
{ HIN getc ; }
|
PROC hexd // (hexd--ascii) convert a hex digit to ascii
{ 
  $F and '0' +
  if( $39 over < ) 
    7 + 
  thanx ; 
}
|

PROC hexp // (val,nybcnt--)
{
  times (
    28 ror
    dup hexd emit
  )
  drop ;
}
|

PROC . // (val--)
{
  8 hexp ;
}
|



PROC ctell // (ptr,cnt--)
{ times (
    c@++ emit
  )
  drop ;
}
|
PROC space { $20 emit ; }
|
PROC spaces // (i--) Print i spaces
{
    times ( space ) ;
|
PROC cr { $D emit $A emit ; }
|
PROC tab { 9 emit ; }
|
// ============================================ 
PROC color // (col--)
{  $1B emit
   "[0;3" ctell
   '0' + emit // output as ascii digit
   'm' emit
   ;
}
|

cd color
PROC red { 1 color ; }
|
PROC green { 2 color ; }
|
PROC yellow { 3 color ; }
|
PROC blue { 4 color ; }
|
PROC magenta { 4 color ; }
|
PROC cyan { 6 color ; }
|
PROC white { 7 color ; }
|

cd system'io
PROC splashp
{ color'blue 4 times (
  "-+|+-- -- - - -- -" ctell
  ) cr ;
}
|
PROC splash
{ splashp 
  tab tab color'yellow " FemtoForth" ctell 
  tab tab color'cyan "2012 Victor Yurkovsky" ctell cr 
  splashp color'white cr ; }
|
// ==============================================================
// TABLE
cd system
mkdir table cd table
$04000000 $8 + SYSVAR bottom
|
$04000000 $C + SYSVAR top
|
$04000080 $10 + SYSVAR runptr // used to preserve table for cleanup after running
|
PROC base // {ptr--base} get table base for pointer
{
    1+ 4 >> 2 << ; // 16:1
}
|

PROC detokenize // (ptr--pointer corresponding to token at ptr)
{
   dup table'base // ptr,table
   swap c@ 4* + @        // reference
   ;
}
|
// ==============================================================
// HEAD
cd system'core
mkdir head cd head
$04000000 $20 + SYSVAR bottom
|
$04000000 $24 + SYSVAR top
|
$04000080 $18 + SYSVAR ptr
|

PROC name // (e--name,cnt) //from entry pointer, get name/cnt
{
    23 + c@++ ;
}
|





cd system'core
mkdir dic cd dic
$04000080 $8 + SYSVAR ptr
|
cd system'core
mkdir run cd run
$04000080 $C + SYSVAR ptr
|
// ============================================ 
// sys
// ============================================ 
cd system'core
PROC osys {
color'green "     TOS      NOS      DSP      RSP     HEAD      CPL     BASE  ENTRIES" ctell cr 
  dup . space over . space DSP 4+ . space RSP . space
  head'ptr . space
  run'ptr . space
  run'ptr table'base . space
  table'runptr -( run'ptr table'base ) 2 >> .

cr ;
 }
|




